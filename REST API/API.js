/*

    public API


    private API
    회사 내부 API, 내부 규칙같은 느낌?


    1회 이상 수행되더라도 추가적인 영향을 미치지 않는 작동 - 몇번을 실행해도 작업 결과가 같은것 ex) 가격조회 등

    API 페이징 기능을 제공하는 경우 API 사용자가 요청의 일부로 서버측에 제공해야하는 두 가지 정보는
    - 각 응답 내 항목의 개수
    - 전체 데이터 세트내의 오프셋

    외부 API 버전을 명시하지 않은 경우 발생할 수 있는 문제는?
    - API를 번복 불가능하는 호환되는 방식으로 변경하는 경우, 기존 클라이언트 계약을 파기하지 않고서는 변경할 수 없게 된다
    
    - 실행이 느릴것 같은 메서드에 aync 비동기 방식 적용


    API 유형
        1. RPC API
            - 클라이언트에게 노출된 메서드를 중심으로 돌아간다
            - 메서드는 인터페이스나 인터페이스 세트로 구성되어있다. 
              즉, 클라이언트가 호출할 수 있는 메서드로 시스템이 추상화된다.(아마 추상 클래스로 이뤄자는 것같다)
            - API를 확장하거나 기능을 추가하려면 메서드를 추가하면 된다.
            - 그렇기 때문에 클라이언트가 할 수 있는 동작은 이미 인터페이스에서 정의 되어있다.


        2. REST API? (Representational State Transfer 의 약자)
            - ** RPC API 와의 가장 큰 차이!!! 동적인 성질을 갖는다. RESTful API 인터페이스는 HATEOAS를 통해
            훨씬 더 동적이다.(ex: 클라이언트에 상태 표현을 응답할때 하이퍼 링크를 동반하는 방법 - 만약 클라이언트가 채팅기능에서
                현재 메세지에 대한 정보를 요청했을 때, 메세지의 모든 정보를 나타내는 객체 + 리소스를 표현하는 객체도 추가적으로 보내게 된다.
                클라이언트 애플리케이션이 추가정보를 얻거나 특정행위를 취하는 리소스 인 것이다. )

            - 표준이나 프로토콜이 아니라 아키텍쳐 스타일이다. 즉, REST 아키텍처 제약 사항을 따르는 API라는 뜻이다.
            - 리소스를 기반으로 접근하고, 사용자에게 추상화 되는 것은 메서드가 아닌 리소스 이름이다.
              그리고 이 리소스들은 시스템 내에서 다양한 개체로 요약, 구현된다.
            - 사용자는 리소스 자체를 볼 수 없다
            - 사용자가 몇 가지 메서드만을 통해 리소스를 이용하도록한다.



            2-1 RESTful API 의 특장점
                - RESTful API의 서버는 무상태성을 지녀야 한다
                - 클라이언트의 세션정보를 저장하면 안된다. -> 서버에 세션정보를 저장하지 않으면 서버그룹으로 가동하는것이 쉽고 클라이언트로 부터
                                                           받는 요청 과부하를 여러 기기로 분산해도 클라이언트는 알지 못한다.
                - 각 메세지는 이전 요청과는 별개로 독립적으로 처리되어야 한다. 
                - 서버는 명시적이든 암시적이든 각 응답의 캐시 속성을 정의해야 한다. == 특정 요청의 응답이 클라이언트에 가깝게 캐싱이 되면 클라이언트가
                                                                                 클라이언트가 서버까지 왔다갔다 할 필요가없다.
                - 네이밍 : 단수형 리소스 단수, 컬렉션 리소스 - 복수형

                + GET PUT DELETE : 멱등성을 지녔다 
                - create new resource -> POST
                - update existing resource -> PUT
                - delete existing resource -> DELETE
                - get state of resource -> GET
                - list the sub-resource of a collection -> GET


                
사용자에게 데이터베이스 레코드 권한을 부여하는 오버헤드를 줄이기 위해, 다음과 같은 조정안을 제안한다.

사용자는 최초 요청에만 권한을 부여 받게 되고, 이후에는 시스템 내 서버가 메모리에 사용자의 세션 정보를 캐시할 것이다.

가장 올바른 설명은 무엇인가?

-> 애플리케이션 인스턴스는 사용자 요청에 대한 세션 정보를 저장하므로 무상태성을 잃는다. 그러므로 RESTful API 라고 할 수 없다.
*/